- extends "base.haml"

- block siteInfo
    %title Music~(*-ω-)ﾄﾞｷ

- block body
    :css
        body { margin: 0;overflow: hidden;}
        canvas{ width: 100%; height: 100% }
    %script(src="/js/three.min.js")
    
    .pf
        %input(type="file")
        %p(style="color:white") 0
    %script(src="/js/audioJS.js")
    :javascript
        var api = new audioApi
        j('input').bind('change',function(){
            api.addFiles('input')
        })
        j(function(){
            console.log(1)
            var scene = new THREE.Scene();
            camera = new THREE.PerspectiveCamera( 75, j(window).width() / j(window).height(), 0.1, 1000 );
            var renderer = new THREE.WebGLRenderer();
            renderer.setSize( j(window).width(), j(window).height() );
            j('body').append( renderer.domElement );

            geometry = new THREE.CylinderGeometry( 1, 1, 1, 6 );
            var geometry2 = new THREE.CylinderGeometry( 1, 1, 1, 6 );
            var material = new THREE.MeshPhysicalMaterial( {color: 0xffffff,opacity:1} );
            var mesh = new THREE.Mesh( geometry, material );
            mesh.position.x = -5;
            var mesh2 = new THREE.Mesh( geometry2, material );
            mesh2.position.x = 5;
            scene.add(mesh)
            scene.add(mesh2)

            camera.position.z = 100;

            var light = new THREE.AmbientLight( 0xffffff ); // soft white light
            scene.add( light );

            var directionalLight = new THREE.DirectionalLight( 0xffffff, 0.2 );
            scene.add( directionalLight );

            var light2 = new THREE.PointLight( 0xffffff, 1, 100 );
            light2.position.set( 50, 20, 2 );
            scene.add( light2 );
            var e1 = e2 = 0;
            api.onrender = function(a1,a2){


                j('p').text(a1[0])
                if(a1[0])mesh.scale.y = a1[0]/2
                if(a2[0])mesh2.scale.y = a2[0]/2
                

                renderer.render( scene, camera );
            }

            j(window).bind({
                mousemove:function(e){
                    camera.position.x = (e.clientX-j(window).width()/2) / j(window).width() * 10
                    camera.position.y = (-e.clientY+j(window).height()/2) / j(window).height() * 10
                },resize:function(){
                    camera.aspect = j(window).width() / j(window).height();
                    camera.updateProjectionMatrix();
                    renderer.setSize( j(window).width(), j(window).height() );
                }
            })
        })